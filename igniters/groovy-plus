## --------------------------------------------------------- ##
## @igniter: groovy-plus                                     ##
## @version: 0.5beta                                         ##
## @author: Giuseppe Ricupero                                ##
## @e-mail: <giuseppe.ricupero@polito.it>                    ##
## @date: 11-08-2016 10.32                                   ##
## @description:                                             ##
## create a groovy project using gradle --init plus extras:  ##
## - optional nexus support (upload and download)            ##
## - codenarc linter plugin with sensible configuration      ##
## - integration with eclipse/eclim                          ##
## - logging via slf4j-log4j2 by default                     ##
## - customize package                                       ##
## - customize classname                                     ##
## --------------------------------------------------------- ##

## general variable initialization {{{
readonly igNAME="${BASH_SOURCE##*/}"
readonly -a igDEPS=(gradle sed grep httping)
readonly -a igTAGS=(java gradle vim eclipse linux)
# }}}

## preamble functions {{{

default_package() { # {{{
	local def_package="$(git config "$profile".package)"; : "${def_package:=none}"

	if [[ $def_package == none ]]; then
		local head="$(locale | awk -F'=' '/LANGUAGE/ {print $2}')"
		local center="$(whoami)"
		local tail="$(sed -r 's/-([a-z])/\u\1/ig' <<<"${project}")"
		echo "${head}.${center}.${tail}"
	else
		echo "$def_package"
	fi
} # }}}

save_as_default() { # {{{
	local key="$1"
	local value="$2"
	local oldef="$(git config "$profile"."$key")"

	if [[ $value != $oldef ]]; then
		echo "Save '$key' -> '$value' as default?"
		select REPLY in yes no; do
			case $REPLY in
				yes)
					git config --global "${profile}"."${key}" "${value}"
					break;;
				no)
					break;;
			esac
		done
	fi
} # }}}

asks_jdk_parameters() { # {{{
	# application
	slog -hg 'Do you want to create an application instead of a library? (no)'
	select REPLY in yes no; do
		case $REPLY in
			yes) application=on; break;;
			no) application=off; break;;
		esac
	done

	# package
	local -r def_package_name="$(default_package)"
	local -r package_pattern='^(|[a-z_]([a-z0-9_]*[.]?)*[a-z0-9_]*)$'
	slog -hg "Do you want to change the default package? (${def_package_name})"
	until
		read -p '> ' package_name
		[[ $package_name =~ $package_pattern ]]
	do
		eecho "Invalid package '$package_name'. Leave blank for default."
	done
	: "${package_name:="${def_package_name}"}"
	save_as_default package "$package_name"

	# main class
	local -r def_main_class="$([[ $application == on ]] && echo 'App' || echo 'Library')"
	local -r class_pattern='^(|([A-Z][a-z0-9_]*)*)$'
	slog -hg "Do you want to change the main library class? (${def_main_class})"
	until
		read -p '> ' main_class
		[[ $main_class =~ $class_pattern ]]
	do
		eecho "Invalid classname '$main_class'. Leave blank for default."
	done
	: "${main_class:="${def_main_class}"}"

	# fatjar
	slog -hg 'Do you want to create a fatjar? (no)'
	select REPLY in yes no; do
		case $REPLY in
			yes) fatjar=on; break;;
			no) fatjar=off; break;;
		esac
	done

	# nexus
	slog -hg 'Do you want to add support for a nexus server? (no)'
	select REPLY in yes no; do
		case $REPLY in
			yes) nexus=on; break;;
			no) nexus=off; break;;
		esac
	done
} # }}}

# }}}

# general connection test {{{
# -----------------------
# google dns servers reply to ICMP
if ! reachable '8.8.8.8'; then
	echo >&2 "'${igNAME}' require an internet connection to work correctly. Aborting."
	exit 1
fi
# }}}

## asks to customize parameters {{{
slog -hg 'Do you want to customize parameters? (no)'
select REPLY in yes no; do
	case $REPLY in
		yes)
			asks_jdk_parameters
			break;;
		no)
			package_name="$(default_package)"
			main_class='Library'
			application='off'
			fatjar='off'
			nexus="$(git config "$profile".nexus || echo off)"
			break;;
	esac
done
# }}}

## igniter variable initialization {{{
readonly language='groovy'
readonly package_path="${package_name//./\/}"
readonly main_dir="src/main/${language}"
readonly test_dir="src/test/${language}"
readonly main_rsc='src/main/resources'
readonly init_classname="$([[ $application == on ]] && echo 'App' || echo 'Library')"
readonly init_class="${init_classname}.${language}"
readonly init_test="${init_classname}Test.${language}"
readonly default_class="${main_dir}/${package_path}/${init_class}"
readonly default_test="${test_dir}/${package_path}/${init_test}"
readonly gradle_conf='build.gradle'
# }}}

## check deps {{{
check_deps igDEPS "$igNAME"
# }}}

## custom functions {{{

hashmap_to_file() { # {{{
	local -n hashmap="$1"
	local outfile="$2"

	local key value
	for key in "${!hashmap[@]}"; do
		value="${hashmap[$key]}"
		echo "${key}=${value}" >> "$outfile"
	done
} # }}}

add_gradle_properties() { # {{{
	local -A nexus_properties=( [nexus_url]="$1"
	                            [nexus_username]="$2"
	                            [nexus_password]="$3"
	                            [nexus_repository_releases]="repository/releases"
	                            [nexus_repository_snapshots]="repository/snapshots" )

	local outfile="gradle.properties"

	hashmap_to_file nexus_properties "$outfile"

	if [[ ! -f "${outfile}" ]]; then
		slog "'${outfile}' not created correctly: exiting..."
		exit 1
	fi
} # }}}

get_nexus_gradle_properties() { # {{{

	local nexus_username nexus_password
	read -p "Provide nexus username: " nexus_username
	read -s -p "Provide nexus password: " nexus_password ; echo

	local def_nexus_url="$(git config "${profile}".nexus || echo none)"
	if [[ $def_nexus_url == none ]]; then
		local nexus_url
		local -a nexus_servers=($(grep -oP 'nexus\h+=\h+\K(?=http).*' "${HOME}/.gitconfig" | uniq) 'new server' none)
		local query_string="Address of the nexus server in the form 'https?://hostname(:port)?' "
		slog -hg "Choose a nexus server to store your artifacts (or none)"
		select nexus_url in "${nexus_servers[@]}"; do
			case "$nexus_url" in
				none)
					break
				;;
				*)
					until grep -q -oP '^https?:\/\/[^:]+(?::\d{1,5})?$' <<<"${nexus_url}"; do
						read -p "${query_string}" nexus_url
					done
					hostname="$(grep -oP 'https?://\K[^:]+' <<<"${nexus_url}")"
					if http_reachable "${hostname}"; then
						break
					else
						read -p "'$hostname' is not reachable, do you want to use it anyway? " res
						if [[ $res =~ [yY]([eE][sS])? ]]; then
							break
						else
							slog "Choose again from the numbered list above."
						fi
					fi
				;;
			esac
		done
	else
		nexus_url="${def_nexus_url}"
	fi
	save_as_default nexus "$nexus_url"

	add_gradle_properties "${nexus_url}/nexus/" "$nexus_username" "$nexus_password"
} ## }}}

http_reachable() { # {{{
	local -r host="$1"
	local -r timeout="${2:-40}"
	local -r count="${3:-4}"
	timeout -s SIGTERM "$timeout" httping -c"$count" "$host" >/dev/null 2>&1 &
	local -r pid=$!
	no_debug spinner "$pid"
	wait "$pid"
} # }}}

groovy2spock() { # {{{
	local l_groovy_version="${*}"
	local spock_version
	case $l_groovy_version in
		3.0*)
			spock_version='2.0-M4-groovy-3.0';;
		2.5*)
			spock_version='1.3-groovy-2.5';;
		2.4*)
			spock_version='1.3-groovy-2.4';;
		2.3*)
			spock_version='1.1-groovy-2.3';;
		2.0*)
			spock_version='1.1-groovy-2.0';;
		1.8*)
			spock_version='0.7-groovy-1.8';;
		1.7*)
			spock_version='0.6-groovy-1.7';;
		1.6*)
			spock_version='0.5-groovy-1.6';;
		*)
			slog "Cannot find an appropriate version of spock for groovy '${groovy_version}': exiting..."
			exit 1
	esac
	echo "${spock_version}"
} # }}}

add_build_gradle() { # {{{

	local lbuildfile="${1}"
	local lpackage="${2}"
	local lversion="${3}"
	local ldescription="${4}"
	local lapp="${5}"
	local lfatjar="${6}"
	local lnexus="${7}"
	local lversioned="${8}"

	sed 's/^|//' > "${lbuildfile}" <<- EOF
	|/*
	| * This build file was auto generated by '${gwNAME}'
	| * @author $(whoami)
	| * @date $(date +'%d-%m-%Y %H.%M')
	| */
	|
	|// [plugins] this block must be the first
	|plugins {
	$(
		[[ $lapp != on ]] && {
			echo "	// to use the 'api' keyword in dependencies"
			echo "	id 'java-library'"
			echo "	// required by jitpack for the libraries"
			echo "	id 'maven'"
		}
	)
	|	// support for groovy
	|	id 'groovy'
	|	// autogenerate eclipse project files
	|	id 'eclipse'
	|	// create an html index linking every report generated
	|	id 'build-dashboard'
	|	// view of the project (jars used, navigable source tree)
	|	id 'project-report'
	|	// groovy code linter
	|	id 'codenarc'
	$(
		plugin='net.saliman.cobertura' && {
			echo '	// groovy code coverage'
			echo "	id '${plugin}' version '$(gradle_plugin_latest_version "${plugin}")'"
		}
		[[ $lversioned == on ]] && {
			plugin='pl.allegro.tech.build.axion-release'
			echo "	// awesome git tag / gradle version integration"
			echo "	id '${plugin}' version '$(gradle_plugin_latest_version "${plugin}")'"
		}
		[[ $lapp == on ]] && {
			echo "	// add run task to execute application"
			echo "	id 'application'"
		}
		[[ $lnexus == on ]] && {
			echo "	// publish on a maven-compatible repository"
			echo "	id 'maven-publish'"
		}; echo '}'
	)
	|
	|// [general] configuration
	|project.ext {
	$(
		groovy_version="$(groovy -version|grep -m1 -ioP 'groovy version: \K(\d+[.])+\d+(?= )')"
		echo "	groovyVersion   = '${groovy_version}'"
		echo "	gradleVersion   = '$(gradle -version|grep -oPm1 '^Gradle \K\b(\d+[.])+\d+\b')'"
		echo "	spockVersion    = '$(groovy2spock "${groovy_version}")'"
	)
	|	codenarcVersion = '2.0.0'
	|	slf4jVersion    = '1.7.30'
	$(
		[[ $application == 'on' ]] && {
			echo "	log4jVersion    = '2.14.0'"
		}
	)
	|}
	|
	|project.with {
	|	//project.name is set in the settings.gradle with rootProject.name
	|	group                 "${lpackage}"
	$(
		[[ $lversioned == on ]] && {
			echo "	version               scmVersion.version"
		} || {
			echo "	version               '${lversion}' // remove -SNAPSHOT for releases"
		}
	)
	|	description           "${ldescription}"
	$(
		[[ $lapp == on ]] && {
			echo "	// executed if no other tasks are specified"
			echo "	defaultTasks          'clean', 'run'"
			echo "	// application entry point"
			echo "	mainClassName = 'Launcher'"
		}; echo '}'
	)
	|// [crosscompile] source and target java version
	|allprojects {
	$(
		echo "	sourceCompatibility = '$(java -version |& grep -m1 -oP '"\K\d+(\.\d+){1,2}(?=")')'"
		echo '	targetCompatibility = sourceCompatibility'
	)
	|}
	|
	|repositories {
	|	jcenter()
	|
	|	// leverage github as a maven repository
	|	maven { url 'https://jitpack.io' }
	$(
		[[ $lnexus == on ]] && {
			echo
			echo '	// IOL internal nexus: see ~/.gradle/gradle.properties'
			echo '	maven { url "${nexus_url}${nexus_repository_releases}" }'
			echo '	maven { url "${nexus_url}${nexus_repository_snapshots}" }'
		}; echo '}'
	)
	|
	|dependencies {
	|	// Groovy language support
	|	$([[ $lapp == on ]] && { echo -n implementation; } || { echo -n api; }) "org.codehaus.groovy:groovy:\$groovyVersion"
	|
	|	// Slf4j dependencies
	|	implementation "org.slf4j:slf4j-api:\$slf4jVersion"
	$(
		[[ $application == 'on' ]] && {
			echo '	implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"'
			echo '	implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"'
			echo '	implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"'
		}
	)
	|
	|	// We use the awesome Spock testing and specification framework
	|	testImplementation "org.spockframework:spock-core:\$spockVersion"
	|}
	|
	|// codenarc groovy source analyses
	|codenarc{
	|	toolVersion = "\$codenarcVersion"
	|
	|	codenarcMain {
	|		configFile = rootProject.file('conf/codenarc/ruleset.groovy')
	|		exclude "**/package-info.*"
	|		ignoreFailures true       // does not block builds
	|		maxPriority1Violations 0
	|		maxPriority2Violations 10
	|		maxPriority3Violations 20
	|	}
	|	codenarcTest {
	|		configFile = rootProject.file('conf/codenarc/ruleset-test.groovy')
	|		ignoreFailures true
	|		maxPriority1Violations 0
	|		maxPriority2Violations 10
	|		maxPriority3Violations 20
	|	}
	|}
	|
	$(
		[[ $lnexus == on ]] && {
			echo '// [maven] upload to http nexus configuration'
			echo 'publishing {'
			echo '	publications {'
			echo '		maven(MavenPublication) {'
			echo '			from components.java'
			echo '		}'
			echo '	}'
			echo '	repositories {'
			echo '		maven {'
			echo '			def releases = "${nexus_url}${nexus_repository_releases}"'
			echo '			def snapshots = "${nexus_url}${nexus_repository_snapshots}"'
			echo "			url = version.endsWith('SNAPSHOT') ? snapshots : releases"
			echo '			credentials {'
			echo '				username nexus_username'
			echo '				password nexus_password'
			echo '			}'
			echo '		}'
			echo '	}'
			echo '}'
		}
	)
	|
	|// [tasks] configuration //
	|jar {
	|	// execute check task when create the jar
	|	dependsOn 'check'
	$(
		[[ $lfatjar == 'on' ]] && {
			echo '	// [fatjar] include deps into the jar artifact'
			echo '	from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }'
		}; echo '}'
	)
	|
	|check {
	|	// create the code coverage report
	|	dependsOn 'cobertura'
	|}
	|
	$(
		[[ $lversioned == 'on' ]] && {
			echo "release {"
			echo "	// test everything before a release"
			echo "	dependsOn 'test'"
			echo "}"
		}
	)
	$(
		[[ $lapp == 'on' ]] && {
			echo
			echo "// gradle task 'run' (from application plugin) with params"
			echo "// ~$ gradle run -Params='[\"first arg\",\"second arg\"]'"
			echo 'run {'
			echo '	enableAssertions = true'
			echo "	if ( project.hasProperty('arams') ) {"
			echo '		args Eval.me(arams)'
			echo '	}'
			echo '}'
		}; echo
	)
	|// [tasks] definition
	|task listJars {
	|	description = 'print out the jars used by the project'
	|	doLast {
	|		configurations.compile.each { File file -> println file.name }
	|	}
	|}
	|
	|tasks.withType(Test) {
	|	useJUnitPlatform()
	|	maxParallelForks = Runtime.runtime.availableProcessors() / 2
	|}
	|task uniTest(type: Test) {
	|	description = 'unit tests task'
	|	exclude '**/*ISpec*'
	|	exclude '**/*FSpec*'
	|}
	|task intTest(type: Test) {
	|	description = 'integration tests task'
	|	exclude '**/*USpec*'
	|	exclude '**/*FSpec*'
	|}
	|task funTest(type: Test) {
	|	description = 'functional tests task'
	|	exclude '**/*USpec*'
	|	exclude '**/*ISpec*'
	|}
	|gradle.startParameter.excludedTaskNames += "uniTest"
	|gradle.startParameter.excludedTaskNames += "intTest"
	|gradle.startParameter.excludedTaskNames += "funTest"
	|// vim: ft=groovy:fdm=indent
	EOF
} # }}}

## add codenarc configuration files {{{
add_codenarc_rulesets() {
	local -r conf_path='conf/codenarc'
	local -r mainrule="${conf_path}/ruleset.groovy"
	local -r testrule="${conf_path}/ruleset-test.groovy"

	mkdir -p "$conf_path"

	sed 's/^|//' > "$mainrule" <<- EOF
	|ruleset {
	|	description 'Main grecovery experimental'
	|
	|	ruleset('rulesets/basic.xml')
	|	ruleset('rulesets/braces.xml')
	|	ruleset('rulesets/concurrency.xml')
	|	ruleset('rulesets/convention.xml')
	|	ruleset('rulesets/design.xml')
	|	ruleset('rulesets/dry.xml')
	|	ruleset('rulesets/exceptions.xml')
	|	ruleset('rulesets/formatting.xml') {
	|		SpaceAroundMapEntryColon {
	|			characterAfterColonRegex = /\h/
	|		}
	|	}
	|	ruleset('rulesets/generic.xml')
	|	ruleset('rulesets/groovyism.xml')
	|	ruleset('rulesets/imports.xml')
	|	ruleset('rulesets/jdbc.xml')
	|	ruleset('rulesets/junit.xml')
	|	ruleset('rulesets/logging.xml')
	|	ruleset('rulesets/naming.xml')
	|	ruleset('rulesets/security.xml')
	|	ruleset('rulesets/size.xml')
	|	ruleset('rulesets/unnecessary.xml')
	|	ruleset('rulesets/unused.xml') {
	|		'UnusedPrivateField' {
	|				enabled = true
	|				ignoreFieldNames = 'lastUpdated, dateCreated, serialVersionUID'
	|		}
	|	}
	|}
	EOF

	sed 's/^|//' > "$testrule" <<- EOF
	|ruleset {
	|	description 'Test experimental'
	|
	|	ruleset('rulesets/basic.xml')
	|	ruleset('rulesets/braces.xml')
	|	ruleset('rulesets/concurrency.xml')
	|	ruleset('rulesets/convention.xml') {
	|		'NoDef' {
	|			excludeRegex = /"[^"]+"/
	|		}
	|	}
	|	ruleset('rulesets/design.xml')
	|	ruleset('rulesets/dry.xml') {
	|		DuplicateStringLiteral (enabled: false)
	|	}
	|	ruleset('rulesets/exceptions.xml')
	|	ruleset('rulesets/formatting.xml')
	|	ruleset('rulesets/generic.xml')
	|	ruleset('rulesets/groovyism.xml')
	|	ruleset('rulesets/imports.xml')
	|	ruleset('rulesets/jdbc.xml')
	|	ruleset('rulesets/junit.xml')
	|	ruleset('rulesets/logging.xml')
	|	ruleset('rulesets/naming.xml') {
	|		'MethodName' enabled: false
	|	}
	|	ruleset('rulesets/security.xml')
	|	ruleset('rulesets/size.xml') {
	|		CyclomaticComplexity {
	|			maxMethodComplexity = 25
	|		}
	|	}
	|	ruleset('rulesets/unnecessary.xml') {
	|		UnnecessaryBooleanExpression(enabled: false)
	|	}
	|	ruleset('rulesets/unused.xml') {
	|		'UnusedPrivateField' {
	|				enabled = true
	|				ignoreFieldNames = 'lastUpdated, dateCreated, serialVersionUID'
	|		}
	|	}
	|}
	EOF
} # }}}

# }}}

## add specific gitignore # {{{
add_gitignore igTAGS

sed 's/^|//' >> .gitignore <<- EOF

|### ${igNAME^} ###
|# gradle
|gradle.properties
|
|# log
|log/
EOF

# }}}

# customize some parameters according to the application or library dicotomy {{{
if [[ $application == 'on' ]]; then
	groovy_init_type='groovy-application'
	gradle_prefix='app'
else
	groovy_init_type='groovy-library'
	gradle_prefix='lib'
fi
# }}}

## build skeleton of the project {{{
silent_gradle init --type "${groovy_init_type}" --dsl groovy --package "${package_name}" --test-framework spock --project-name "${project}"
# }}}

## 2. Remove ${gradle_conf}, ${default_class}, ${default_test} {{{
files_to_remove=("${gradle_conf}" "${default_class}" "${default_test}")
for f in "${files_to_remove[@]}"; do rm "${gradle_prefix}/${f}"; done
# }}}

## 3. create resource plus and default package in main and test {{{
dirs_to_create=("${main_dir}/${package_path}" "${test_dir}/${package_path}" "${main_rsc}")
for d in "${dirs_to_create[@]}"; do mkdir -p "${gradle_prefix}/${d}"; done
# }}}

## 4. Add gradle properties with Nexus repository data (optional) {{{
# 7.1 create custom build.gradle # {{{
if [[ $nexus == on ]]; then
	get_nexus_gradle_properties
fi
# }}}

## 5. create custom ${gradle_conf}, ${default_class}, ${default_test}  {{{
##    plus: optionally generate Launcher.${language} (if application is on)
## -------------------------------------------------------------------
add_library() { # {{{
	local lmainpath="${1}"
	local lclass="${2}"
	local lpackage="${3}"
	local outfile="${lmainpath}/${lclass}.${language}"

	sed 's/^|//' > "${outfile}" <<- EOF
	|package ${lpackage}
	|
	|import groovy.util.logging.Slf4j
	|
	|/**
	| * This Groovy source file was auto generated by '${gwNAME}'
	| * @author $(whoami)
	| * @date $(date +'%d-%m-%Y %H.%M')
	| */
	|@Slf4j
	|class ${lclass} {
	|	/**
	|	 * This method returns always true.
	|	 */
	|	Boolean some${lclass}Method() {
	|		true
	|	}
	|}
	EOF

} # }}}

add_library_specification() { # {{{
	local ltestpath="${1}"
	local lclass="${2}"
	local lpackage="${3}"
	local -r outfile="${ltestpath}/${lclass}USpec.${language}"

	sed 's/^|//' > "$outfile" <<- EOF
	|package ${lpackage}
	|
	|import spock.lang.Specification
	|
	|/**
	| * This Spock specification was auto generated by '${gwNAME}'
	| * @author $(whoami)
	| * @date $(date +'%d-%m-%Y %H.%M')
	| */
	|class ${lclass}USpec extends Specification {
	|	def "some${lclass}Method returns true"() {
	|		setup:
	|			${lclass} lib = new ${lclass}()
	|		when:
	|			Boolean result = lib.some${lclass}Method()
	|		then:
	|			result == true
	|	}
	|}
	EOF
	if [[ ! -f "${outfile}" ]]; then
		slog "Launcher.${language} not created correctly: exiting..."
		exit 1
	fi
} # }}}

add_launcher_class() { # {{{
	local lmain_dir="${1}"
	local lmain_class="${2}"
	local lpackage_name="${3}"

	launcher_class="${lmain_dir}/Launcher.${language}"
	sed 's/^|//' > "${launcher_class}" <<- EOF
	|import groovy.util.logging.Slf4j
	|import ${lpackage_name}.${lmain_class}
	|
	|/**
	| * This class is used as entry point for the entire application.
	| * <p>
	| * Initially i've used an external script to accomplish this task but an internal
	| * class has several advantages:<ul>
	| * <li>never leave the main session of coding
	| * <li>automatic code check as the regular class
	| * <li>lint check (codenarc)
	| * <li>execute with gradle through the 'application' plugin</ul>
	| * @author $(whoami)
	| * @date $(date +'%d-%m-%y %H.%M')
	| */
	|@Slf4j
	|class Launcher {
	|
	|	/**
	|	 * Entry point of the application
	|	 */
	|	static void main(String... args) {
	|		// log each parameter to logs/app.log
	|		args.each { log.info it }
	|		assert new ${lmain_class}().some${lmain_class}Method() == true
	|	}
	|
	|}
	EOF
	if [[ ! -f "${launcher_class}" ]]; then
		slog "Launcher.${language} not created correctly: exiting..."
		exit 1
	fi
} # }}}

# 7.1 create custom build.gradle # {{{
default_version=0.1.0
project_version=${default_version}

add_build_gradle \
	"${gradle_prefix}/${gradle_conf}" \
	"${package_name}" \
	"${project_version}" \
	"${description}" \
	"${application}" \
	"${fatjar}" \
	"${nexus}" \
	"${versioned}" # from the gigawatt main script

# unit test 7.1
if ! silent_gradle tasks; then
	slog "File '${gradle_conf}' not created correctly: exiting..."
	exit 1
fi
# }}}

# 7.2 create library / library_specification
mainpath="${gradle_prefix}/${main_dir}/${package_path}"
testpath="${gradle_prefix}/${test_dir}/${package_path}"

add_library "${mainpath}" "${main_class}" "${package_name}"
add_library_specification "${testpath}" "${main_class}" "${package_name}"
# unit test 7.2
if ! silent_gradle test; then
	slog "Files '$main_class', '${main_class}Spec' not created correctly: exiting..."
	exit 1
fi

# 7.3 optionally generate Launcher class
if [[ $application == 'on' ]]; then
	add_launcher_class "${gradle_prefix}/${main_dir}" "${main_class}" "${package_name}"
fi
# No need to test because of set -e
# }}}

## 6. Uncompress PAYLOAD (codenarc conf) into the project {{{
## ------------------------------------------------------
add_codenarc_rulesets
# unit test 14.a
conf_files=(ruleset ruleset-test)
for f in "${conf_files[@]}"; do
	if [[ ! -f "conf/codenarc/${f}.groovy" ]]; then
		slog "${f}.groovy not created correctly: exiting..."
		exit 1
	fi
done
# }}}

## log4j configuration file {{{
add_log4j2_conf() { # {{{
	local outfile="${1}"
	sed 's/^|//' > "${outfile}" <<- 'EOF'
	|<?xml version="1.0" encoding="UTF-8"?>
	|<Configuration status="INFO" monitorInterval="30">
	|	<Appenders>
	|		<Console name="Console" target="SYSTEM_OUT">
	|			<PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
	|		</Console>
	|		<RollingFile
	|			name="RollingFile"
	|			fileName="logs/app.log"
	|			filePattern="logs/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz">
	|			<PatternLayout pattern="%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
	|			<Policies>
	|				<SizeBasedTriggeringPolicy size="20 MB"/>
	|			</Policies>
	|			<DefaultRolloverStrategy max="20"/>
	|		</RollingFile>
	|	</Appenders>
	|	<Loggers>
	|		<Root level="info">
	|			<AppenderRef ref="RollingFile"/>
	|		</Root>
	|	</Loggers>
	|</Configuration>
	EOF
	if [[ ! -f "${log4j_conf}" ]]; then
		slog "log4j2 conf file not '${log4j_conf}' not created correctly: exiting..."
		exit 1
	fi
} # }}}
if [[ $application == 'on' ]]; then
	log4j_conf="${gradle_prefix}/${main_rsc}/log4j2.xml"
	add_log4j2_conf "${log4j_conf}"
fi
# }}}

## eclipse project files: .classpath, .project, .settings {{{
silent_gradle eclipse
# unit test 10
for ep_file in classpath project settings; do
	if [[ ! -e ${gradle_prefix}/.${ep_file} ]]; then
		slog "Generating eclipse project files failed: exiting..."
		exit 1
	fi
done
eclipse_classpath="${gradle_prefix}/.classpath"
sed -i -r 's/(org.eclipse.jdt.launching.JRE_CONTAINER)[^"]+/\1/' "${eclipse_classpath}"
# unit test 11
if grep -q 'StandardVMType' "${eclipse_classpath}"; then
	slog "Fix for eclipse .classpath file not applied correctly: exiting..."
	exit 1
fi
# }}}

# vim: ft=zsh:fdm=marker
