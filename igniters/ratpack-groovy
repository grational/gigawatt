## ------------------------------------------------------------ ##
## @igniter: ratpack-groovy                                     ##
## @author: Giuseppe Ricupero                                   ##
## @e-mail: giuseppe.ricupero@polito.it                         ##
## @date: 22-03-2017 10.18                                      ##
## @description: create a basic ratpack project base on groovy  ##
## ------------------------------------------------------------ ##

## variable initialization {{{
# general
readonly igNAME="${BASH_SOURCE##*/}"
readonly -a igDEPS=()
readonly -a igTAGS=(groovy gradle vim sublimetext linux osx)
# specific
readonly ratpack_dir='src/ratpack'
readonly modules_dir='src/ratpack/modules'
readonly classes_dir='src/main/groovy'
readonly tests_dir='src/test/groovy'
readonly gradle_conf='build.gradle'
# }}}

## check deps {{{
check_deps igDEPS "$igNAME"
# }}}

## add specific gitignore # {{{
add_gitignore igTAGS
# }}}

## custom functions {{{

add_build_gradle() { # {{{

	local lbuildfile="${1}"
	local lversion="${2}"
	local ldescription="${3}"

	# test remote nexus server with groovy
	# remember to try catch (because of java.net.UnknownHostException)
	# if ( new URL(nexusUrl).text.contains('Sonatype Nexus') ) ...
	# nexusUrl has to be in the format: 'http://maven.grosio.pgol.com/nexus'
	sed 's/^|//' > "${lbuildfile}" <<- EOF
	|/*
	| * This build file was auto generated by '${gwNAME}'
	| * @author $(whoami)
	| * @date $(date +'%d-%m-%Y %H.%M')
	| */
	|
	|// [plugins] this block must be the first
	|plugins {
	|	// support for groovy in ratpack
	|	id 'io.ratpack.ratpack-groovy' version '1.4.6'
	|	// awesome git tag / gradle version integration
	|	id 'pl.allegro.tech.build.axion-release' version '1.9.1'
	|}
	|
	|// [general] configuration
	|project.ext {
	$(
		echo "	groovyVersion = '$(groovy -version|grep -m1 -oP '(\d+[.])+\d+(?= )')'"
		echo "	gradleVersion = '$(gradle -version|grep -oPm1 '^Gradle \K\b(\d+[.])+\d+\b')'"
	)
	|	spockVersion  = '1.1-groovy-2.4'
	|	slf4jVersion  = '1.7.25'
	|	wrapper.gradleVersion "\$gradleVersion"
	|}
	|
	|project.with {
	|	//project.name is set in the settings.gradle with rootProject.name
	|	version               "${lversion}-SNAPSHOT" // (remove -SNAPSHOT for releases)
	|	description           "${ldescription}"
	|	defaultTasks          'run'
	|}
	|
	|// [crosscompile] source and target java version
	|allprojects {
	$(
		echo "	sourceCompatibility = '$(java -version |& grep -m1 -oP '"\K\d[.]\d')'"
		echo '	targetCompatibility = sourceCompatibility'
	)
	|}
	|
	|repositories {
	|	jcenter()
	|
	|	// leverage github as a maven repository
	|	maven { url 'https://jitpack.io' }
	|}
	|
	|dependencies {
	|	// Slf4j dependencies to print out to the console
	|	implementation "org.slf4j:slf4j-simple:\$slf4jVersion"
	|
	|	// We use the awesome Spock testing and specification framework
	|	testImplementation "org.spockframework:spock-core:\$spockVersion"
	|}
	|
	|// vim: ft=groovy:fdm=indent
	EOF
} # }}}

add_ratpack_groovy() { # {{{

	local dir="${1}"

	sed 's/^|//' > "${dir}/ratpack.groovy" <<- EOF
	|/*
	| * This ratpack file was auto generated by '${gwNAME}'
	| * @author $(whoami)
	| * @date $(date +'%d-%m-%Y %H.%M')
	| */
	|import static ratpack.groovy.Groovy.ratpack
	|
	|ratpack {
	|	// cors headers
	|	include 'modules/cors.groovy'
	|
	|	// external file conf
	|	include 'modules/server-config.groovy'
	|
	|	// fake business logic module
	|	include 'modules/business-stub.groovy'
	|
	|	// logging (have to be the last one)
	|	include 'modules/request-log.groovy'
	|}
	EOF

} # }}}

add_cors_groovy() { # {{{

	local dir="${1}"

	sed 's/^|//' > "${dir}/cors.groovy" <<- EOF
	|/*
	| * This ratpack file was auto generated by '${gwNAME}'
	| * @author $(whoami)
	| * @date $(date +'%d-%m-%Y %H.%M')
	| */
	|import static ratpack.groovy.Groovy.ratpack
	|import ratpack.http.MutableHeaders
	|
	|ratpack {
	|	handlers {
	|		all {
	|			MutableHeaders headers = response.headers
	|			headers.set('Access-Control-Allow-Origin', '*')
	|			headers.set('Access-Control-Allow-Methods','GET')
	|			headers.set('Access-Control-Allow-Headers', 'x-requested-with, origin, content-type, accept')
	|			next()
	|		}
	|	}
	|}
	EOF
} # }}}

add_server_config_groovy() { # {{{

	local dir="${1}"

	sed 's/^|//' > "${dir}/server-config.groovy" <<- EOF
	|/*
	| * This ratpack file was auto generated by '${gwNAME}'
	| * @author $(whoami)
	| * @date $(date +'%d-%m-%Y %H.%M')
	| *
	| * Example conf class
	| * ------------------
	| * class YextApi {
	| *   String key
	| *   String url
	| * }
	| *
	| * Corresponding env variables
	| * ---------------------------
	| * export RATPACK_YEXT__API__KEY='123abcd'
	| * export RATPACK_YEXT__API__URL='https://api.yext.com/v2'
	| */
	|// external
	|import static ratpack.groovy.Groovy.ratpack
	|// internal
	|
	|ratpack {
	|	serverConfig {
	|		env()
	|		//require("/yext/api", YextApi)
	|	}
	|}
	EOF
} # }}}

add_business_stub_groovy() { # {{{

	local dir="${1}"

	sed 's/^|//' > "${dir}/business-stub.groovy" <<- EOF
	|/*
	| * This ratpack file was auto generated by '${gwNAME}'
	| * @author $(whoami)
	| * @date $(date +'%d-%m-%Y %H.%M')
	| */
	|// external
	|import static ratpack.groovy.Groovy.ratpack
	|// internal
	|
	|ratpack {
	|	handlers {
	|		get {
	|			render 'This application was auto generated by "${gwNAME}"'
	|		}
	|	}
	|}
	EOF
} # }}}

add_request_log_groovy() { # {{{

	local dir="${1}"

	sed 's/^|//' > "${modules_dir}/request-log.groovy" <<- EOF
	|/*
	| * This ratpack file was auto generated by '${gwNAME}'
	| * @author $(whoami)
	| * @date $(date +'%d-%m-%Y %H.%M')
	| */
	|// external
	|import static ratpack.groovy.Groovy.ratpack
	|import ratpack.handling.RequestLogger
	|// internal
	|
	|ratpack {
	|	handlers {
	|		all(RequestLogger.ncsa())
	|	}
	|}
	EOF
} # }}}

# }}}

## 1. build directories of the project {{{
dirs_to_create=("${ratpack_dir}" "${modules_dir}" "${classes_dir}" "${tests_dir}")
mkdir -p "${dirs_to_create[@]}"
# }}}

# 2. create custom build.gradle # {{{
default_version=0.1.0
project_version=${default_version}

add_build_gradle \
	"${gradle_conf}" \
	"${project_version}" \
	"${description}"

# unit test 2.
if ! silent_gradle tasks; then
	slog "File '${gradle_conf}' not created correctly: exiting..."
	exit 1
fi
# }}}
#
# 3. add ratpack files (ratpack,cors).groovy # {{{
add_ratpack_groovy "${ratpack_dir}"
add_cors_groovy "${modules_dir}"
add_server_config_groovy "${modules_dir}"
add_business_stub_groovy "${modules_dir}"
add_request_log_groovy "${modules_dir}"

if ! silent_gradle jar; then
	slog "Ratpack handlers files not created correctly: exiting..."
	exit 1
fi
# }}}

# vim: ft=zsh:fdm=marker
