## ------------------------------------------- ##
## @lib: git-related functions                 ##
## @author: Giuseppe Ricupero                  ##
## @date: 18-08-2016 15.28                     ##
## @description:                               ##
## every function to deal with the git backend ##
## ------------------------------------------- ##

add_gitreadme() { # {{{
	local gitreadme="README.md"

	if ! ls README.* >/dev/null 2>&1; then
		sed 's/^|//' > "${gitreadme}" <<- EOF
		|# ${project}
		|
		|${description}
		EOF
		# unit test
		if [[ ! -f "${gitreadme}" ]]; then
			slog "${gitreadme} not created correctly: exiting..."
			exit 1
		fi
	fi
} # }}}

create_git_repo() { # {{{
	local luser="$1"
	local lpassword="$2"
	local ltoken="$3"
	local lapi="$4"
	local lbackend="$5"
	local lnamespace_id="$6"
	local lproject="$7"
	local ldescription="$8"

	local curl="curl -s -H 'Content-Type: application/json'"
	case ${lbackend} in
		github)
			curl+=" -H '$(git_auth_header $lbackend $ltoken)'"
			if [[ $lnamespace_id == default ]]; then
				curl+=" ${lapi}/user/repos \
					-d '{\"name\":\"${lproject}\", \
					\"description\": \"${ldescription}\"}'"
			else
				curl+=" ${lapi}/orgs/${lnamespace_id}/repos \
					-d '{\"name\":\"${lproject}\", \
					\"description\": \"${ldescription}\"}'"
			fi
			;;
		gitlab)
			curl+=" -H '$(git_auth_header $lbackend $ltoken)' ${lapi}/projects"
			if [[ $lnamespace_id == default ]]; then
				curl+=" -d '{\"name\":\"${lproject}\", \
					\"description\": \"${ldescription}\"}'"
			else
				curl+=" -d '{\"name\":\"${lproject}\", \
					\"description\": \"${ldescription}\", \
					\"namespace_id\": \"${lnamespace_id}\"}'"
			fi
			;;
		bitbucket)
			curl+=" -u '${luser}:${lpassword}'"
			if [[ $lnamespace_id == default ]]; then
				curl+=" ${lapi}/2.0/repositories/${luser}/${lproject}"
			else
				curl+=" ${lapi}/2.0/repositories/${lnamespace_id}/${lproject}"
			fi
			curl+=" -d '{\"name\":\"${lproject}\", \
				\"description\": \"${ldescription}\", \
				\"scm\": \"git\"}'"
			;;
	esac
	eval "${curl} &>/dev/null" &
	no_debug spinner "$!"
} # }}}

git_local_initialize() { # {{{
	# Initialize the local repo
	git init -q
	# Adds the files in the local repository and stages them for commit.
	# To unstage a file, use 'git reset HEAD YOUR-FILE'.
	git add .
	# Commits the tracked changes and prepares them to be pushed to a
	# remote repository. To remove this commit and modify the file,
	# use 'git reset --soft HEAD~1' and commit and add the file again.
	git commit -m "First commit" -q
} # }}}

git_add_remote() { # {{{
	local lssh_user="$1"
	local lhost="$2"
	local lscope="$3"
	local lproject="$4"

	# Sets the new remote, verify with: $(git remote -v)
	git remote add origin "${lssh_user}@${lhost}:${lscope}/${lproject}.git"
} # }}}

# vim: ft=zsh:fdm=marker
